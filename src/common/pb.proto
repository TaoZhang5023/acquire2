syntax = "proto3";

enum ErrorCode {
  NOT_USING_LATEST_VERSION = 0;
  INTERNAL_SERVER_ERROR = 1;
  INVALID_MESSAGE_FORMAT = 2;
  INVALID_USERNAME = 3;
  MISSING_PASSWORD = 4;
  PROVIDED_PASSWORD = 5;
  INCORRECT_PASSWORD = 6;
  INVALID_MESSAGE = 7;
  COULD_NOT_CONNECT = 8;
}

enum GameBoardType {
  LUXOR = 0;
  TOWER = 1;
  AMERICAN = 2;
  FESTIVAL = 3;
  WORLDWIDE = 4;
  CONTINENTAL = 5;
  IMPERIAL = 6;
  NOTHING = 7;
  NOTHING_YET = 8;
  CANT_PLAY_EVER = 9;
  I_HAVE_THIS = 10;
  WILL_PUT_LONELY_TILE_DOWN = 11;
  HAVE_NEIGHBORING_TILE_TOO = 12;
  WILL_FORM_NEW_CHAIN = 13;
  WILL_MERGE_CHAINS = 14;
  CANT_PLAY_NOW = 15;
  MAX = 16;
}

enum GameMode {
  SINGLES_1 = 1;
  SINGLES_2 = 2;
  SINGLES_3 = 3;
  SINGLES_4 = 4;
  SINGLES_5 = 5;
  SINGLES_6 = 6;
  TEAMS_2_VS_2 = 7;
  TEAMS_2_VS_2_VS_2 = 8;
  TEAMS_3_VS_3 = 9;
}

enum PlayerArrangementMode {
  VERSION_1 = 0;
  RANDOM_ORDER = 1;
  EXACT_ORDER = 2;
  SPECIFY_TEAMS = 3;
}

message PB {
  message GameSetupData {
    message Position {
      int32 user_id = 1;
      bool is_host = 2;
      bool approves_of_game_setup = 3;
    }

    GameMode game_mode = 1;
    PlayerArrangementMode player_arrangement_mode = 2;
    repeated Position positions = 3;
  }

  message GameStateData {
    message RevealedTileRackTile {
      int32 tile = 1;
      int32 player_id_belongs_to = 2;
    }

    GameAction game_action = 1;
    int32 timestamp = 2;
    repeated RevealedTileRackTile revealed_tile_rack_tiles = 3;
    repeated int32 revealed_tile_bag_tiles = 4;
    // 1 more than actual player_id
    int32 player_id_with_playable_tile_plus_one = 5;
  }

  message GameData {
    message Position {
      int32 user_id = 1;
      bool is_host = 2;
    }

    // these 3 entries are excluded if client knows about this game
    GameMode game_mode = 1;
    PlayerArrangementMode player_arrangement_mode = 2;
    repeated Position positions = 3;

    // skip game state datas client already knows
    repeated GameStateData game_state_datas = 4;
  }

  message GameSetupAction {
    message JoinGame {}

    message UnjoinGame {}

    message ApproveOfGameSetup {}

    message ChangeGameMode { GameMode game_mode = 1; }

    message ChangePlayerArrangementMode {
      PlayerArrangementMode player_arrangement_mode = 1;
    }

    message SwapPositions {
      int32 position1 = 1;
      int32 position2 = 2;
    }

    message KickUser { int32 user_id = 1; }

    JoinGame join_game = 1;
    UnjoinGame unjoin_game = 2;
    ApproveOfGameSetup approve_of_game_setup = 3;
    ChangeGameMode change_game_mode = 4;
    ChangePlayerArrangementMode change_player_arrangement_mode = 5;
    SwapPositions swap_positions = 6;
    KickUser kick_user = 7;
  }

  message GameAction {
    message StartGame {}

    message PlayTile { int32 tile = 1; }

    message SelectNewChain { GameBoardType chain = 1; }

    message SelectMergerSurvivor { GameBoardType chain = 1; }

    message SelectChainToDisposeOfNext { GameBoardType chain = 1; }

    message DisposeOfShares {
      int32 trade_amount = 1;
      int32 sell_amount = 2;
    }

    message PurchaseShares {
      repeated GameBoardType chains = 1;
      bool end_game = 2;
    }

    message GameOver {}

    StartGame start_game = 1;
    PlayTile play_tile = 2;
    SelectNewChain select_new_chain = 3;
    SelectMergerSurvivor select_merger_survivor = 4;
    SelectChainToDisposeOfNext select_chain_to_dispose_of_next = 5;
    DisposeOfShares dispose_of_shares = 6;
    PurchaseShares purchase_shares = 7;
    GameOver game_over = 8;
  }

  message MessageToServer {
    message Login {
      message GameData {
        int32 game_id = 1;
        int32 game_state_history_size = 2;
      }

      int32 version = 1;
      string username = 2;
      string password = 3;
      repeated GameData game_datas = 4;
      // int32 game_id_to_join = 5;
    }

    message CreateGame { GameMode game_mode = 1; }

    message EnterGame { int32 game_display_number = 1; }

    message ExitGame {}

    message DoGameAction {
      int32 game_state_history_size = 1;
      GameAction game_action = 2;
    }

    Login login = 1;
    CreateGame create_game = 2;
    EnterGame enter_game = 3;
    ExitGame exit_game = 4;
    GameSetupAction do_game_setup_action = 5;
    DoGameAction do_game_action = 6;
  }
}
